"""
author: Bhoj Bahadur Karki
Date: 2020-August-15th
Description: Adapter design pattern

The proxy design pattern includes a new object, which is called “Proxy” in place of an existing object
which is called the “Real Subject”. The proxy object created of the real subject must be on the same
interface in such a way that the client should not get any idea that
proxy is used in place of the real object. Requests generated by the client to the proxy
are passed through the real subject.

The UML representation of proxy pattern is as follows −

Proxy Pattern
How to implement the proxy pattern?
Let us now see how to implement the proxy pattern.
"""


class Image:
    def __init__(self, filename):
        self._filename = filename

    def load_image(self):
        print('Loading...', self._filename)

    def display_image(self):
        print('display...', self._filename)


class Proxy:
    def __init__(self, subject):
        self._subject = subject
        self._proxystate = None


class ImageProxy(Proxy):

    def display_image(self):
        if self._proxystate is None:
            self._subject.load_image()
            self._proxystate = 1
        print("Displaying ...",self._subject._filename)


img1 = ImageProxy(Image("IMAGE_SUB_1"))
img2 = ImageProxy(Image("IMAGE_SUB_2"))

img1.display_image()
img1.display_image()

img2.display_image()
img2.display_image()

img1.display_image()
img1.display_image()
